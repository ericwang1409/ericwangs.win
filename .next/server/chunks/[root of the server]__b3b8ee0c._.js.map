{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/eric3/LocalDocuments/ericwangs.win/app/writings/utils.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\ntype Metadata = {\n  title: string\n  publishedAt: string\n  summary: string\n  image?: string\n}\n\nfunction parseFrontmatter(fileContent: string) {\n  let frontmatterRegex = /---\\s*([\\s\\S]*?)\\s*---/\n  let match = frontmatterRegex.exec(fileContent)\n  let frontMatterBlock = match![1]\n  let content = fileContent.replace(frontmatterRegex, '').trim()\n  let frontMatterLines = frontMatterBlock.trim().split('\\n')\n  let metadata: Partial<Metadata> = {}\n\n  frontMatterLines.forEach((line) => {\n    let [key, ...valueArr] = line.split(': ')\n    let value = valueArr.join(': ').trim()\n    value = value.replace(/^['\"](.*)['\"]$/, '$1') // Remove quotes\n    metadata[key.trim() as keyof Metadata] = value\n  })\n\n  return { metadata: metadata as Metadata, content }\n}\n\nfunction getMDXFiles(dir) {\n  return fs.readdirSync(dir).filter((file) => path.extname(file) === '.mdx')\n}\n\nfunction readMDXFile(filePath) {\n  let rawContent = fs.readFileSync(filePath, 'utf-8')\n  return parseFrontmatter(rawContent)\n}\n\nfunction getMDXData(dir) {\n  let mdxFiles = getMDXFiles(dir)\n  return mdxFiles.map((file) => {\n    let { metadata, content } = readMDXFile(path.join(dir, file))\n    let slug = path.basename(file, path.extname(file))\n\n    return {\n      metadata,\n      slug,\n      content,\n    }\n  })\n}\n\nexport function getBlogPosts() {\n  return getMDXData(path.join(process.cwd(), 'app', 'writings', 'posts'))\n}\n\nexport function formatDate(date: string, includeRelative = false) {\n  let currentDate = new Date()\n  if (!date.includes('T')) {\n    date = `${date}T00:00:00`\n  }\n  let targetDate = new Date(date)\n\n  let yearsAgo = currentDate.getFullYear() - targetDate.getFullYear()\n  let monthsAgo = currentDate.getMonth() - targetDate.getMonth()\n  let daysAgo = currentDate.getDate() - targetDate.getDate()\n\n  let formattedDate = ''\n\n  if (yearsAgo > 0) {\n    formattedDate = `${yearsAgo}y ago`\n  } else if (monthsAgo > 0) {\n    formattedDate = `${monthsAgo}mo ago`\n  } else if (daysAgo > 0) {\n    formattedDate = `${daysAgo}d ago`\n  } else {\n    formattedDate = 'Today'\n  }\n\n  let fullDate = targetDate.toLocaleString('en-us', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  })\n\n  if (!includeRelative) {\n    return fullDate\n  }\n\n  return `${fullDate} (${formattedDate})`\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AASA,SAAS,iBAAiB,WAAmB;IAC3C,IAAI,mBAAmB;IACvB,IAAI,QAAQ,iBAAiB,IAAI,CAAC;IAClC,IAAI,mBAAmB,KAAM,CAAC,EAAE;IAChC,IAAI,UAAU,YAAY,OAAO,CAAC,kBAAkB,IAAI,IAAI;IAC5D,IAAI,mBAAmB,iBAAiB,IAAI,GAAG,KAAK,CAAC;IACrD,IAAI,WAA8B,CAAC;IAEnC,iBAAiB,OAAO,CAAC,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,KAAK,KAAK,CAAC;QACpC,IAAI,QAAQ,SAAS,IAAI,CAAC,MAAM,IAAI;QACpC,QAAQ,MAAM,OAAO,CAAC,kBAAkB,MAAM,gBAAgB;;QAC9D,QAAQ,CAAC,IAAI,IAAI,GAAqB,GAAG;IAC3C;IAEA,OAAO;QAAE,UAAU;QAAsB;IAAQ;AACnD;AAEA,SAAS,YAAY,GAAG;IACtB,OAAO,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC,KAAK,MAAM,CAAC,CAAC,OAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,UAAU;AACrE;AAEA,SAAS,YAAY,QAAQ;IAC3B,IAAI,aAAa,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC3C,OAAO,iBAAiB;AAC1B;AAEA,SAAS,WAAW,GAAG;IACrB,IAAI,WAAW,YAAY;IAC3B,OAAO,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,KAAK;QACvD,IAAI,OAAO,iGAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;QAE5C,OAAO;YACL;YACA;YACA;QACF;IACF;AACF;AAEO,SAAS;IACd,OAAO,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,YAAY;AAChE;AAEO,SAAS,WAAW,IAAY,EAAE,kBAAkB,KAAK;IAC9D,IAAI,cAAc,IAAI;IACtB,IAAI,CAAC,KAAK,QAAQ,CAAC,MAAM;QACvB,OAAO,GAAG,KAAK,SAAS,CAAC;IAC3B;IACA,IAAI,aAAa,IAAI,KAAK;IAE1B,IAAI,WAAW,YAAY,WAAW,KAAK,WAAW,WAAW;IACjE,IAAI,YAAY,YAAY,QAAQ,KAAK,WAAW,QAAQ;IAC5D,IAAI,UAAU,YAAY,OAAO,KAAK,WAAW,OAAO;IAExD,IAAI,gBAAgB;IAEpB,IAAI,WAAW,GAAG;QAChB,gBAAgB,GAAG,SAAS,KAAK,CAAC;IACpC,OAAO,IAAI,YAAY,GAAG;QACxB,gBAAgB,GAAG,UAAU,MAAM,CAAC;IACtC,OAAO,IAAI,UAAU,GAAG;QACtB,gBAAgB,GAAG,QAAQ,KAAK,CAAC;IACnC,OAAO;QACL,gBAAgB;IAClB;IAEA,IAAI,WAAW,WAAW,cAAc,CAAC,SAAS;QAChD,OAAO;QACP,KAAK;QACL,MAAM;IACR;IAEA,IAAI,CAAC,iBAAiB;QACpB,OAAO;IACT;IAEA,OAAO,GAAG,SAAS,EAAE,EAAE,cAAc,CAAC,CAAC;AACzC","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/eric3/LocalDocuments/ericwangs.win/app/sitemap.ts"],"sourcesContent":["import { getBlogPosts } from './writings/utils'\n\nexport const baseUrl = 'https://portfolio-blog-starter.vercel.app'\n\nexport default async function sitemap() {\n  let blogs = getBlogPosts().map((post) => ({\n    url: `${baseUrl}/blog/${post.slug}`,\n    lastModified: post.metadata.publishedAt,\n  }))\n\n  let routes = ['', '/blog'].map((route) => ({\n    url: `${baseUrl}${route}`,\n    lastModified: new Date().toISOString().split('T')[0],\n  }))\n\n  return [...routes, ...blogs]\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,UAAU;AAER,eAAe;IAC5B,IAAI,QAAQ,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,IAAI,GAAG,CAAC,CAAC,OAAS,CAAC;YACxC,KAAK,GAAG,QAAQ,MAAM,EAAE,KAAK,IAAI,EAAE;YACnC,cAAc,KAAK,QAAQ,CAAC,WAAW;QACzC,CAAC;IAED,IAAI,SAAS;QAAC;QAAI;KAAQ,CAAC,GAAG,CAAC,CAAC,QAAU,CAAC;YACzC,KAAK,GAAG,UAAU,OAAO;YACzB,cAAc,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QACtD,CAAC;IAED,OAAO;WAAI;WAAW;KAAM;AAC9B","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///Users/eric3/LocalDocuments/ericwangs.win/app/rss/route.ts"],"sourcesContent":["import { baseUrl } from '../sitemap'\nimport { getBlogPosts } from '../writings/utils'\n\nexport async function GET() {\n  let allBlogs = await getBlogPosts()\n\n  const itemsXml = allBlogs\n    .sort((a, b) => {\n      if (new Date(a.metadata.publishedAt) > new Date(b.metadata.publishedAt)) {\n        return -1\n      }\n      return 1\n    })\n    .map(\n      (post) =>\n        `<item>\n          <title>${post.metadata.title}</title>\n          <link>${baseUrl}/blog/${post.slug}</link>\n          <description>${post.metadata.summary || ''}</description>\n          <pubDate>${new Date(\n            post.metadata.publishedAt\n          ).toUTCString()}</pubDate>\n        </item>`\n    )\n    .join('\\n')\n\n  const rssFeed = `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <rss version=\"2.0\">\n    <channel>\n        <title>My Portfolio</title>\n        <link>${baseUrl}</link>\n        <description>This is my portfolio RSS feed</description>\n        ${itemsXml}\n    </channel>\n  </rss>`\n\n  return new Response(rssFeed, {\n    headers: {\n      'Content-Type': 'text/xml',\n    },\n  })\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI,WAAW,MAAM,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD;IAEhC,MAAM,WAAW,SACd,IAAI,CAAC,CAAC,GAAG;QACR,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,WAAW,IAAI,IAAI,KAAK,EAAE,QAAQ,CAAC,WAAW,GAAG;YACvE,OAAO,CAAC;QACV;QACA,OAAO;IACT,GACC,GAAG,CACF,CAAC,OACC,CAAC;iBACQ,EAAE,KAAK,QAAQ,CAAC,KAAK,CAAC;gBACvB,EAAE,gHAAA,CAAA,UAAO,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC;uBACrB,EAAE,KAAK,QAAQ,CAAC,OAAO,IAAI,GAAG;mBAClC,EAAE,IAAI,KACb,KAAK,QAAQ,CAAC,WAAW,EACzB,WAAW,GAAG;eACX,CAAC,EAEX,IAAI,CAAC;IAER,MAAM,UAAU,CAAC;;;;cAIL,EAAE,gHAAA,CAAA,UAAO,CAAC;;QAEhB,EAAE,SAAS;;QAEX,CAAC;IAEP,OAAO,IAAI,SAAS,SAAS;QAC3B,SAAS;YACP,gBAAgB;QAClB;IACF;AACF","debugId":null}}]
}